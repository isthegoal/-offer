# coding: utf-8           使用学习生长法进行思考，  认真开始分析，  题不在多，在于精


'''
     题目：  给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间内删除该节点

     分析： 删除时候需要进行一种覆盖，在覆盖时就需要头结点的参与了，但是有些情况是不需要头结点的参与的

     方案：  待删除节点的位置可能有三种情况，不同情况下的删除方式不同。
            【1】如果待删除 结点在   链表的中间位置，可以直接在O(1)时间复杂度删除
            【2】如果待删除的位于尾部，  则需要从头遍历到尾部，得到待删除结点的前一个结点，然后再删除，时间复杂度是O(n)
            【3】如果待删除的位于只有一个结点的链表的维度，  这种最简单的一种情况下，直接删除结点即可。


     总的时间复杂度为：((n-1)*O(1) + O(n))/n，结果为O(1)。

'''
def delete_node(link,node):
    #先考虑最简单的第三种情况
    if link==node:
        del node

    #较为复杂的第二种情况
    if node.next==None:
        while link:
            if link.next==node:
                link.next=None #相对于直接把最后一位删了
            link=link.next
    else:
        #最后是算是比较简单的 第一种情况，   因为不能得到之前的，所以可以 利用后面的覆盖前面的，然后删去后面的，可以起到相同的效果。
        node.val=node.next.val
        n_node=node.next
        node.next=n_node.next
        # 比较重要的  释放资源的步骤
        del n_node
            


