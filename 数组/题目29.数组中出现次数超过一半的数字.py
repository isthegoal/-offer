# coding: utf-8           使用学习生长法进行思考，  认真开始分析，  题不在多，在于精

'''
      题目：数组中出现次数超过一半的数字

      分析：这里最简单的方法还是使用   哈希表实现就行了
          或者使用 快速排序中的partation方法就可以

      思路：有几个思路吧  【这里面试官的目的是找到 O(N)复杂度的算法】
           【1】思路一：使用哈希表，统计每个数字出现的次数，然后得到  哈希值大于  长度一半的数  O(n)
           【2】思路二：使用排序算法先排序，排序完成后 再定位到之间的数即可，时间复杂度为 O(nlogn)
           【3】思路三：使用快排中的 partation方式，  可以随机选一个数字，然后用快排的Partition划分一下，小的放左边，大的放右边，
           如果当前在中间位置，就说明已经找到了排序后中间位置的那个数(中位数)，就一定是要找的超过一半的数字。否则就比较一下位置，
           向左找向右找，递归这个过程。  但是这个方法还是比较麻烦的，得用partation方法找到中间的位置点。

'''
#时间复杂度最低的   哈希方法吧，就n即可
def get_more_half(nums):
    #定义的核心的 哈希字典
    hashs=dict()

    length=len(nums)

    for n in nums:
        if hashs.get(n):
            hashs[n]=hashs[n]+1
        else:
            hashs[n]=1

        #在循环中   累计的结果来个判断即可。  这样也不用单独再循环了
        if hashs[n]>length/2:
            return n
